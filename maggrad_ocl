#!/usr/local/bin/python2.7

# 2013-11-07: A kod mukodik, a parameterek jok, de egyelore csak az orientacios mezot tudja inicializalni
#             idoleptetes meg abszolut nincs benne. Sem kiiratas.
#            1: Most mar be tud rakni 1 db kort, de az idolepes meg nem megy.




from __future__ import division
import argparse
import pprint
import math
import os
import re
import time
import sys
import random
import copy
import configobj
import ast
import numpy as np
import scipy.io as sio
import pyopencl as cl
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
#import pylab
import time
import struct

from PIL import Image

# Parse arguments
parser = argparse.ArgumentParser()
parser.add_argument("--gpu", help="selected GPU ID", type=int, default=0)
args = parser.parse_args()

GPUID=args.gpu


global DEBUG_MODE
DEBUG_MODE=True

def wd(str):
  if DEBUG_MODE:
    print(str)

def insert_global_vars(text):
  for var in parameters:
    text = text.replace(var, str(parameters[var]))

  return text

# insert the numerical value into each
def insert_vars_in_cfg(text,cfg):
   for i in range(15):
    for section in cfg:
      for var in cfg[section]:
        text=text.replace(var,str(cfg[section][var]))
   return text

## Init simulation parameters from config file
def init_parameters():
  global parameters, ctype

  # Read paramters file:
  cfg = configobj.ConfigObj('parameters_binary.cfg', write_empty_values=True, list_values=False, interpolation=True)
  cfg['SETUP']['SQRT2'] = str(math.sqrt(2))
  p = copy.deepcopy(cfg)

  # Parse parameters:
  for section in p:
    for variable in p[section]:
      # var = insert_vars_in_cfg(cfg[section][variable], cfg)
      var = cfg[section][variable]
      if var.isalpha() and var.capitalize() in ('True', 'False'):
        p[section][variable] = ast.literal_eval(var.capitalize())
      elif var.isalpha() and len(var) > 0:
        try:
          var = insert_vars_in_cfg(var, cfg, True)
          p[section][variable] = eval(var, {}, {})
        except:
          pass
      elif var.isalpha() or len(var) == 0:
        pass
      else:
        try:
          p[section][variable] = eval(var, {}, {})
        except NameError:
          var = insert_vars_in_cfg(var, cfg)
          try:
            p[section][variable] = eval(var, {}, {})
          except:
            pass
        except IndentationError:
          p[section][variable] = insert_vars_in_cfg(var, cfg)


  del p['INVISIBLE_PHYSICAL_PARAMETERS']
  del p['CONSTANTS']
  # Simulation box setup:
  if p['SETUP']['DIMENSION'] == 2:
    p['2D_SIMBOX']['LINSIZE'] = p['2D_SIMBOX']['XSIZE']*p['2D_SIMBOX']['YSIZE']
    p['2D_SIMBOX']['XSTEP']= 1
    p['2D_SIMBOX']['YSTEP']= p['2D_SIMBOX']['XSIZE']

    wd("Box is 2D, {}x{}".format(p['2D_SIMBOX']['XSIZE'], p['2D_SIMBOX']['YSIZE']))
    del p['3D_SIMBOX']
  if p['SETUP']['DIMENSION'] == 3:
    p['3D_SIMBOX']['LINSIZE'] = p['3D_SIMBOX']['XSIZE']*p['3D_SIMBOX']['YSIZE']*p['3D_SIMBOX']['ZSIZE']
    p['3D_SIMBOX']['XSTEP']= 1
    p['3D_SIMBOX']['YSTEP']= p['3D_SIMBOX']['XSIZE']
    p['3D_SIMBOX']['ZSTEP']= p['3D_SIMBOX']['XSIZE']*p['3D_SIMBOX']['YSIZE']
    p['3D_SIMBOX']['WSTEP']= p['3D_SIMBOX']['ZSTEP']
    p['3D_SIMBOX']['WSIZE']= p['3D_SIMBOX']['ZSIZE']
    p['3D_SIMBOX']['DVOL'] = p['SETUP']['DXYZ']**3
    wd("Box is 3D, {}x{}x{}".format(p['3D_SIMBOX']['XSIZE'], p['3D_SIMBOX']['YSIZE'], p['3D_SIMBOX']['ZSIZE']))
    del p['2D_SIMBOX']

  # Continuation
  p['SETUP']['SIM_CONTINUE'] = False
  if type(p['SETUP']['START_STEP']) == int and p['SETUP']['START_STEP'] >= 0:
    p['SETUP']['SIM_CONTINUE'] = True
  else:
    p['SETUP']['START_STEP'] = 0

  if p['SETUP']['PRECISION'] == 'double':
    p['VISIBLE_PHYSICAL_PARAMETERS']['tFloat'] = 'double'
    ctype = np.float64
  else:
    p['VISIBLE_PHYSICAL_PARAMETERS']['tFloat'] = 'float'
    ctype = np.float32

  p['VISIBLE_PHYSICAL_PARAMETERS']['PERIODIC'] = 1
  p['VISIBLE_PHYSICAL_PARAMETERS']['NOFLUX'] = 2
  p['VISIBLE_PHYSICAL_PARAMETERS']['<MACROS>'] = ''

  #if p['PHYSICAL']['ROTATE'] == True:
    #p['PHYSICAL']['<MACROS>'] = '{}\n#define COS_THETA {}'.format(p['PHYSICAL']['<MACROS>'], math.cos(p['PHYSICAL']['ROT_DEG']/180*math.pi))
    #p['PHYSICAL']['<MACROS>'] = '{}\n#define SIN_THETA {}'.format(p['PHYSICAL']['<MACROS>'], math.sin(p['PHYSICAL']['ROT_DEG']/180*math.pi))

  # Set global variables
  parameters = {}
  replace_params = ('<MACROS>', 'tFloat', 'M_SQRT2','T_0')
  bool_params = ( 'ROTATE', 'SIM_CONTINUE', 'SINGLE_NUCLEUS')

  for section in p:
    for variable in p[section]:
      globals()[variable] = p[section][variable]
      if variable not in replace_params:
        if variable not in bool_params:
          p['VISIBLE_PHYSICAL_PARAMETERS']['<MACROS>'] = '{}\n#define {} {}'.format(p['VISIBLE_PHYSICAL_PARAMETERS']['<MACROS>'], variable, p[section][variable])
        elif p[section][variable] == True:
          p['VISIBLE_PHYSICAL_PARAMETERS']['<MACROS>'] = '{}\n#define {}'.format(p['VISIBLE_PHYSICAL_PARAMETERS']['<MACROS>'], variable)
      else:
        parameters[variable] = p[section][variable]

  parameters['<MACROS>'] = p['VISIBLE_PHYSICAL_PARAMETERS']['<MACROS>']

def init_fields(context):
    global Field, Phi_buffer, PhiNew_buffer, C_buffer,CNew_buffer, Ori_buffer, OriNew_buffer, RandState_buffer, Phi, Jx_buffer, Jy_buffer
    # here we could choose to continue a former simulation or start a new one
    if NEW_OR_CONTINUE==0:
      Field=    np.empty(LINSIZE).astype(np.float64)
      Phi_buffer  = cl.Buffer(context, cl.mem_flags.READ_WRITE,  Field.nbytes)
      C_buffer    = cl.Buffer(context, cl.mem_flags.READ_WRITE,  Field.nbytes)
      Ori_buffer  = cl.Buffer(context, cl.mem_flags.READ_WRITE,  Field.nbytes)

    elif NEW_OR_CONTINUE==1:
      Field=np.load("pf_final.npy")
      Phi_buffer=cl.Buffer(context, cl.mem_flags.READ_WRITE | cl.mem_flags.COPY_HOST_PTR, hostbuf=Field)
      Field=np.load("cf_final.npy")
      C_buffer=cl.Buffer(context, cl.mem_flags.READ_WRITE | cl.mem_flags.COPY_HOST_PTR, hostbuf=Field)
      Field=np.load("of_final.npy")
      Ori_buffer=cl.Buffer(context, cl.mem_flags.READ_WRITE | cl.mem_flags.COPY_HOST_PTR, hostbuf=Field)

    PhiNew_buffer  = cl.Buffer(context, cl.mem_flags.READ_WRITE, Field.nbytes)
    OriNew_buffer  = cl.Buffer(context, cl.mem_flags.READ_WRITE,  Field.nbytes)
    CNew_buffer    = cl.Buffer(context, cl.mem_flags.READ_WRITE,  Field.nbytes)
    #Seed_buffer = cl.Buffer(context, cl.mem_flags.READ_WRITE, 4*LINSIZE)
    RandState_buffer = cl.Buffer(context, cl.mem_flags.READ_WRITE, 2*4*LINSIZE)  # Two uint32 for every pixel.
    Jx_buffer = cl.Buffer(context, cl.mem_flags.READ_WRITE,  Field.nbytes)
    Jy_buffer = cl.Buffer(context, cl.mem_flags.READ_WRITE,  Field.nbytes)

    if SHOW_GRAIN_BOUNDARY==1:
      Phi=np.empty(LINSIZE).astype(np.float64)



def export_field(queue,file0_pf,file0_cf,file0_of,figure,step="",final=0):
  # figure==0: just the data
  # figure==1: just the picture
  # figure==2: both of them
  #------------------------------------------------------
  #                     PHASE FIELD:
  #------------------------------------------------------

  cl.enqueue_read_buffer(queue,Phi_buffer, Field).wait()
  if figure==0 or figure==2:
    file_pf=str(file0_pf)
    if final==0:
      file_pf=file_pf+str(step)+".npy"
    elif final==1:
      file_pf=file_pf+".npy"

    if EXPORT_FORMAT==1:
      if final==0:
        np.save(file_pf,Field)
      elif final==1:
        np.save(file_pf,Field)

    if EXPORT_FORMAT==2:
      if final==0:
        np.save(file_pf,np.reshape(Field,(XSIZE,YSIZE)).astype(np.float16))
      elif final==1:
        np.save(file_pf,np.reshape(Field,(XSIZE,YSIZE)))


  #----------------------FIGURE--------------------------
  if figure==1 or figure==2:
    phi_data0=Field.reshape((XSIZE,YSIZE))
    s=(XSIZE,YSIZE,3)
    phi_rgb=np.empty(LINSIZE*3).astype(np.float16)
    phi_rgb=phi_rgb.reshape(s)

    phi_rgb[:,:,0]=1.0
    phi_rgb[:,:,1]=phi_data0
    phi_rgb[:,:,2]=0.0

    phi_rgb[phi_data0>1.0,1]=1.0
    phi_rgb[phi_data0<0.0,1]=0.0

    # fig=plt.figure(figsize=(5,5))
    # fig_plot = fig.add_subplot(1,1,1)
    # phi_image=fig_plot.imshow(phi_rgb)
    # out_file="phi_"+str(step)+".png"
    # fig.savefig(out_file)
    # plt.close(fig)

    out_file="phi_"+str(step)+".tiff"
    img=Image.fromarray((255*phi_rgb).astype(np.uint8))
    img.save(out_file)
    # free unused memory space:
    del phi_rgb
    phi_data=copy.copy(phi_data0)
    if SHOW_GRAIN_BOUNDARY==0:
      del phi_data
      del phi_data0

  #------------------------------------------------------
  #                   ORIENTATION FIELD
  #------------------------------------------------------


  cl.enqueue_read_buffer(queue,Ori_buffer, Field).wait()
  if figure==0 or figure==2:
    file_of=str(file0_of)
    if final==0:
      file_of=file_of+str(step)+".npy"
    elif final==1:
      file_of=file_of+".npy"

    if EXPORT_FORMAT==1:
      if final==0:
        np.save(file_of,Field)
      elif final==1:
        np.save(file_of,Field)

    if EXPORT_FORMAT==2:
      if final==0:
        np.save(file_of,np.reshape(Field,(XSIZE,YSIZE)).astype(float16))
      elif final==1:
        np.save(file_of,np.reshape(Field,(XSIZE,YSIZE)))

  #----------------------FIGURE--------------------------
  if figure==1 or figure==2:
    ori_data=Field.reshape((XSIZE,YSIZE))
    s=(XSIZE,YSIZE,3)
    ori_rgb=np.empty(3*LINSIZE).astype(np.float16)
    ori_rgb=ori_rgb.reshape(s)

    ori_rgb[np.logical_and(ori_data>0.0,ori_data<(1.0/3.0)),0]=3.0*(1.0/3.0-ori_data[np.logical_and(ori_data>0.0,ori_data<(1.0/3.0))])
    ori_rgb[np.logical_and(ori_data>0.0,ori_data<(1.0/3.0)),1]=0.0
    ori_rgb[np.logical_and(ori_data>0.0,ori_data<(1.0/3.0)),2]=3.0*ori_data[np.logical_and(ori_data>0.0,ori_data<(1.0/3.0))]

    ori_rgb[np.logical_and(ori_data>(1.0/3.0),ori_data<(2.0/3.0)),0]=3.0*(ori_data[np.logical_and(ori_data>(1.0/3.0),ori_data<(2.0/3.0))]-1.0/3.0)
    ori_rgb[np.logical_and(ori_data>(1.0/3.0),ori_data<(2.0/3.0)),1]=3.0*(ori_data[np.logical_and(ori_data>(1.0/3.0),ori_data<(2.0/3.0))]-1.0/3.0)
    ori_rgb[np.logical_and(ori_data>(1.0/3.0),ori_data<(2.0/3.0)),2]=3.0*(2.0/3.0-ori_data[np.logical_and(ori_data>(1.0/3.0),ori_data<(2.0/3.0))])

    ori_rgb[ori_data>(2.0/3.0),0]=1.0
    ori_rgb[ori_data>(2.0/3.0),1]=3.0*(1.0-ori_data[ori_data>(2.0/3.0)])
    ori_rgb[ori_data>(2.0/3.0),2]=0.0
    if SHOW_GRAIN_BOUNDARY==1:
      ori_rgb[np.logical_and(phi_data>0.4,phi_data<0.6),0]=1.0
      ori_rgb[np.logical_and(phi_data>0.4,phi_data<0.6),1]=1.0
      ori_rgb[np.logical_and(phi_data>0.4,phi_data<0.6),2]=1.0

    # fig=plt.figure(figsize=(5,5))
    # fig_plot = fig.add_subplot(1,1,1)
    # ori_image=fig_plot.imshow(ori_rgb)
    # out_file="ori_"+str(step)+".png"
    # fig.savefig(out_file)
    # plt.close(fig)

    out_file="ori_"+str(step)+".tiff"
    img=Image.fromarray((255*ori_rgb).astype(np.uint8))
    img.save(out_file)
    # free memory space of unused variables:
    del ori_data
    del ori_rgb
    if SHOW_GRAIN_BOUNDARY==1:
     del phi_data

  #------------------------------------------------------
  #                CONCENTRATION FIELD:
  #------------------------------------------------------

  cl.enqueue_read_buffer(queue,C_buffer, Field).wait()
  if figure==0 or figure==2:
    file_cf=str(file0_cf)
    if final==0:
      file_cf=file_cf+str(step)+".npy"
    elif final==1:
      file_cf=file_cf+".npy"

    if EXPORT_FORMAT==1:
      if final==0:
        np.save(file_cf,Field)
      elif final==1:
        np.save(file_cf,Field)

    if EXPORT_FORMAT==2:
      if final==0:
        np.save(file_cf,np.reshape(Field,(XSIZE,YSIZE)).astype(float16))
      elif final==1:
        np.save(file_cf,np.reshape(Field,(XSIZE,YSIZE)))

  #----------------------FIGURE--------------------------
  if figure==1 or figure==2:
    conc_data=Field.reshape((XSIZE,YSIZE))
    s=(XSIZE,YSIZE,3)
    conc_rgb=np.empty(LINSIZE*3).astype(np.float16)
    conc_rgb=conc_rgb.reshape(s)

    c_red=(conc_data-C_S)/(C_L-C_S)
    c_red[c_red>1]=1
    c_red[c_red<0]=0

    conc_rgb[:,:,0]=c_red
    conc_rgb[:,:,1]=c_red
    conc_rgb[:,:,2]=1.0-c_red

    # fig=plt.figure(figsize=(5,5))
    # fig_plot = fig.add_subplot(1,1,1)
    # conc_image=fig_plot.imshow(conc_rgb)
    # out_file="conc_"+str(step)+".png"
    # fig.savefig(out_file)
    # fig.clf()
    # plt.close(fig)

    out_file="conc_"+str(step)+".tiff"
    img=Image.fromarray((255*conc_rgb).astype(np.uint8))
    img.save(out_file)

    del conc_data
    del conc_rgb
    del c_red

def print_setup():
  if MODELL==1:
    print "\tMAGGRAD-THETA MODEL"
  if MODELL==2:
    print "\tPLAPP MODEL"
  if ANISOTROPY==1:
    print "\tISOTROPIC SIMULATION"
  elif ANISOTROPY==2:
    print "\tKINETIC ANISOTROPY"
  elif ANISOTROPY==3:
    print "\tSURFACE ANISOTROPY"




def main():
 # define necessery variables:
  global WG_SIZE

 # read in the parameters from the config file, and then insert the values:
  init_parameters()

  WG_SIZE=WORK_GROUP_SIZE

 # read in the kernel file and insert the global parameters:
  with open('init_functions.cl') as f: init_src = f.read() 
  with open('kernel.cl') as f: program_src = f.read()
  program_src=program_src.replace('<INIT_FUNCTIONS>',init_src)
  program_src = insert_global_vars(program_src)
  with open('kernel_src.cl', 'w') as f: f.write(program_src)

  print_setup()

 # Init platform, device, queue
  platform = cl.get_platforms()[0]
  vendor = platform.get_info(cl.platform_info.VENDOR)
  devices = platform.get_devices(device_type=cl.device_type.GPU);
  device = devices[GPUID]
  print('Selected device: ID:{} {}'.format(GPUID, device.get_info(cl.device_info.NAME)))
  context = cl.Context((device,))
  queue = cl.CommandQueue(context, device)

 # creating and building the program:
  program=cl.Program(context,program_src)
  program.build("-Werror", devices=(device,))

 # creating buffers for the fields:
  init_fields(context)
  
 # Init seeds:
  program.init_MWC64X(queue, (LINSIZE,), (WG_SIZE,), RandState_buffer, np.uint32(NOISE_SEED))
  #program.init_seed(queue, (LINSIZE,), (WG_SIZE,), Seed_buffer)

  #Initialize the fields:
  if NEW_OR_CONTINUE==0:
    program.initialize_orientation_field(queue,(LINSIZE,),(WG_SIZE,),Ori_buffer,RandState_buffer)
    program.initialize_phase_field(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer)
    program.initialize_concentration_field(queue,(LINSIZE,),(WG_SIZE,),C_buffer)
    
  if INITIAL_SHAPE==0:
    for i_ind in range(0,32,1):
      for j_ind in range(0,32,1):
        x0=np.float64(16+32*i_ind)
        y0=np.float64(16+32*j_ind)
        radius=np.float64(5.0)
        start_orientation_1=np.float64(random.uniform(0,1))
        program.insert_one_nucleus(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer, C_buffer, Ori_buffer, x0,y0,radius,start_orientation_1,RandState_buffer)

  if INITIAL_SHAPE==1:
    program.insert_four_rectangles(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer, C_buffer, Ori_buffer)
  if INITIAL_SHAPE==2:
    x0=np.float64(0.5*XSIZE)
    y0=np.float64(0.5*YSIZE)
    radius=np.float64(5.0)
    start_orientation_1=np.float64(0.25)
    program.insert_one_nucleus(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer, C_buffer, Ori_buffer, x0,y0,radius,start_orientation_1,RandState_buffer)

  if INITIAL_SHAPE==3:
    radius=np.float64(20.0)
    program.insert_four_nucleus(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer, C_buffer, Ori_buffer, radius,RandState_buffer)

  if INITIAL_SHAPE==4:
  	program.insert_two_rectangles(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer, C_buffer, Ori_buffer)  

  if INITIAL_SHAPE==5:
  	program.insert_two_rectangles_noise_between(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer, C_buffer, Ori_buffer, radius,RandState_buffer)

  if INITIAL_SHAPE==6:
    num_of_nn=3
    x0=np.float64(0.5*XSIZE)
    y0=np.float64(0.5*YSIZE)
    radius=np.float64(5.0)
    dist_nn=50.0
    start_orientation_1=np.float64(0.25)
    program.insert_one_nucleus(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer, C_buffer, Ori_buffer, x0,y0,radius,start_orientation_1,RandState_buffer)
    for ind_nn in range(0,num_of_nn):
      x0=np.float64(0.5*XSIZE)+math.floor(dist_nn*math.cos(math.pi*2.0*ind_nn/(np.float64(num_of_nn))))
      y0=np.float64(0.5*XSIZE)+math.floor(dist_nn*math.sin(math.pi*2.0*ind_nn/(np.float64(num_of_nn))))
      start_orientation=start_orientation_1+np.float64(ind_nn+1.0)/np.float64(num_of_nn+1.0)
      program.insert_one_nucleus(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer, C_buffer, Ori_buffer, x0,y0,radius,start_orientation,RandState_buffer)

  if INITIAL_SHAPE==7:
    for i_ind in range(0,32,1):
      for j_ind in range(0,32,1):
        x0=np.float64(16+32*i_ind)
        y0=np.float64(16+32*j_ind)
        radius=np.float64(16.0)
        start_orientation_1=np.float64(random.uniform(0,1))
        program.insert_rectangle(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer, C_buffer, Ori_buffer, x0,y0, radius,start_orientation_1,RandState_buffer)


  number_of_nucleus=0
  if number_of_nucleus>0:
   # initialise the nucleus:
   x0=np.float64(0.5*XSIZE)
   y0=np.float64(0.5*YSIZE)
   radius=np.float64(5.0)
   start_orientation_1=np.float64(0.7)
   program.insert_one_nucleus(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer, C_buffer, Ori_buffer, x0,y0,radius,start_orientation_1,RandState_buffer)

  if number_of_nucleus==2:
   x1=np.float64(384.0)
   y1=np.float64(384.0)
   radius=np.float64(30.0)
   start_orientation_2=np.float64(0.7)
   program.insert_one_nucleus(queue,(LINSIZE,),(WG_SIZE,),Phi_buffer, C_buffer, Ori_buffer, x1,y1,radius,start_orientation_2,RandState_buffer)


 # write out initial configuration:
  export_field(queue,'pf_init','cf_init','of_init',figure=1,step=0)

  active_buffer=1

  start_time = time.time()
#**********************************************************
#                    MAIN LOOP STARTS
#**********************************************************

  for step in range(1,int(NUM_OF_STEPS),1):

   if active_buffer==1:
    args_phi=(Phi_buffer, C_buffer, PhiNew_buffer, Ori_buffer,RandState_buffer)
    args_c=(Phi_buffer,C_buffer,CNew_buffer, Jx_buffer, Jy_buffer)
    args_ori=(Phi_buffer, Ori_buffer, OriNew_buffer,RandState_buffer)
    args_jx=(Phi_buffer,Jx_buffer,C_buffer)
    args_jy=(Phi_buffer,Jy_buffer,C_buffer)


   else:
    args_phi=(PhiNew_buffer, CNew_buffer, Phi_buffer, OriNew_buffer,RandState_buffer)
    args_c=(PhiNew_buffer,CNew_buffer,C_buffer, Jx_buffer, Jy_buffer)
    args_ori=(PhiNew_buffer, OriNew_buffer, Ori_buffer,RandState_buffer)
    args_jx=(PhiNew_buffer,Jx_buffer,CNew_buffer)
    args_jy=(PhiNew_buffer,Jy_buffer,CNew_buffer)

   program.phase_field_update(queue,(LINSIZE,),(WG_SIZE,), *args_phi)
   program.J_X_CALC(queue,(LINSIZE,),(WG_SIZE,),*args_jx)
   program.J_Y_CALC(queue,(LINSIZE,),(WG_SIZE,),*args_jy)
   program.conc_field_update(queue,(LINSIZE,),(WG_SIZE,), *args_c)
   program.orientation_field_update(queue,(LINSIZE,),(WG_SIZE,), *args_ori)

   active_buffer=1-active_buffer

   if step%PRINT_STEPS==0:
    export_field(queue,'pf_','cf_','of_',figure=2,step=step)

  # if step%2==1:
  #  cl.enqueue_read_buffer(queue,OriNew_buffer, Ori).wait()
  #  cl.enqueue_read_buffer(queue,PhiNew_buffer, Phi).wait()
  #  cl.enqueue_read_buffer(queue,CNew_buffer, C).wait()
  #  export_field('pf_','cf_','of_',Phi,Ori,C,step)
  # Read the values of the orientation field:

  export_field(queue,'pf_final','cf_final','of_final',figure=1,step=step,final=1)
  print "Total time of the simulation= {}".format(time.time()-start_time)



if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    pass

